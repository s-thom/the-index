/* Generated by restful-react */

import { customGet, customMutate, CustomGetProps, CustomMutateProps } from './util/fetchers';
/**
 * A user
 */
export interface User {
  /**
   * The name of the user
   */
  name: string;
}

/**
 * An error
 */
export interface Error {
  /**
   * A unique identifier for this particular occurrence of the problem
   */
  id: string;
  /**
   * An application-specific error code
   */
  code?: string;
  /**
   * A human-readable explanation of the problem
   */
  detail?: string;
  /**
   * The HTTP status code applicable to the problem
   */
  status?: number;
  /**
   * An object containing additional information about the problem
   */
  meta?: { [key: string]: any };
}

/**
 * A link stored in the-index
 */
export interface Link {
  /**
   * The ID of the link
   */
  id: string;
  /**
   * The URL of the link
   */
  url: string;
  /**
   * List of tags associated with the link
   */
  tags: string[];
  /**
   * The date the link was added
   */
  created?: string;
  /**
   * The visibility of the link
   */
  visibility: 'private' | 'internal' | 'public';
  user: User;
}

/**
 * Information relating to the pagination of the response
 */
export interface Pagination {
  /**
   * The maximum number of items returned in the query
   */
  limit: number;
  /**
   * The number of items that have been previously
   */
  offset: number;
  /**
   * The total number of items that could be retrieved
   */
  total: number;
  /**
   * The current page number
   */
  page: number;
}

/**
 * Response for when problems occur in the application
 */
export interface ErrorResponseResponse {
  /**
   * List of errors
   */
  errors: Error[];
}

export interface PostV2AuthResponse {
  user: User;
}

export interface PostV2AuthRequestBody {
  /**
   * The name of the user
   */
  name: string;
  /**
   * The TOTP code entered by the user
   */
  code?: string;
}

/**
 * Log in
 *
 * Logs a user in
 *
 */
export function postV2Auth(
  props: CustomMutateProps<PostV2AuthResponse, ErrorResponseResponse, void, PostV2AuthRequestBody, void>,
) {
  return customMutate<PostV2AuthResponse, ErrorResponseResponse, void, PostV2AuthRequestBody, void>(
    'POST',
    `/v2/auth`,
    props,
  );
}

export interface DeleteV2AuthResponse {
  [key: string]: any;
}

/**
 * Log out
 *
 * Logs the current user out
 *
 */
export function deleteV2Auth(props: CustomMutateProps<DeleteV2AuthResponse, ErrorResponseResponse, void, void, void>) {
  return customMutate<DeleteV2AuthResponse, ErrorResponseResponse, void, void, void>('DELETE', `/v2/auth`, props);
}

export interface GetV2LinksResponse {
  /**
   * The list of links
   */
  links: Link[];
  pagination: Pagination;
}

export interface GetV2LinksQueryParams {
  /**
   * List of tags to include
   */
  tags?: string[];
  /**
   * The upper bound for the time a link was added
   */
  before?: string;
  /**
   * The lower bound for the time a link was added
   */
  after?: string;
  /**
   * The visibility of links to search for
   */
  visibility?: 'private' | 'internal' | 'public';
  /**
   * The maximum number of links to return
   */
  limit?: number;
  /**
   * The number of links to skip when returning
   */
  offset?: number;
}

/**
 * Search links
 *
 * Searches for links matching the given parameters
 *
 */
export function getV2Links(
  props: CustomGetProps<GetV2LinksResponse, ErrorResponseResponse, GetV2LinksQueryParams, void>,
) {
  return customGet<GetV2LinksResponse, ErrorResponseResponse, GetV2LinksQueryParams, void>(`/v2/links`, props);
}

export interface PostV2LinksResponse {
  link: Link;
}

export interface PostV2LinksRequestBody {
  /**
   * The link to be added
   */
  url: string;
  /**
   * List of tags to add to the link
   */
  tags: string[];
  /**
   * The visibility of links to search for
   */
  visibility: 'private' | 'internal' | 'public';
}

/**
 * Add new link
 *
 * Adds a new link
 *
 */
export function postV2Links(
  props: CustomMutateProps<PostV2LinksResponse, ErrorResponseResponse, void, PostV2LinksRequestBody, void>,
) {
  return customMutate<PostV2LinksResponse, ErrorResponseResponse, void, PostV2LinksRequestBody, void>(
    'POST',
    `/v2/links`,
    props,
  );
}

export interface GetV2LinkIdResponse {
  link: Link;
}

export interface GetV2LinkIdPathParams {
  /**
   * The ID of the link
   */
  id: string;
}

/**
 * Get link detail
 *
 * Gets the detail of a single link
 *
 */
export function getV2LinkId({
  id,
  ...props
}: CustomGetProps<GetV2LinkIdResponse, ErrorResponseResponse, void, GetV2LinkIdPathParams> & {
  /**
   * The ID of the link
   */
  id: string;
}) {
  return customGet<GetV2LinkIdResponse, ErrorResponseResponse, void, GetV2LinkIdPathParams>(`/v2/links/${id}`, props);
}

export interface GetV2TagsResponse {
  /**
   * The list of tags
   */
  tags: string[];
}

export interface GetV2TagsQueryParams {
  /**
   * List of tags to exclude
   */
  exclude?: string[];
}

/**
 * Get common tags
 *
 * Gets a list of the most commonly used tags by the current user
 *
 */
export function getV2Tags(props: CustomGetProps<GetV2TagsResponse, ErrorResponseResponse, GetV2TagsQueryParams, void>) {
  return customGet<GetV2TagsResponse, ErrorResponseResponse, GetV2TagsQueryParams, void>(`/v2/tags`, props);
}

export interface GetV2UserIdResponse {
  user: User;
}

export interface GetV2UserIdPathParams {
  /**
   * The name of the user, or the special string `me`
   */
  name: string;
}

/**
 * Get user detail
 *
 * Gets the detail of a single user
 *
 */
export function getV2UserId({
  name,
  ...props
}: CustomGetProps<GetV2UserIdResponse, ErrorResponseResponse, void, GetV2UserIdPathParams> & {
  /**
   * The name of the user, or the special string `me`
   */
  name: string;
}) {
  return customGet<GetV2UserIdResponse, ErrorResponseResponse, void, GetV2UserIdPathParams>(`/v2/users/${name}`, props);
}
